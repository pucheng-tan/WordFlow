import pytest
from datetime import datetime
from pytest_jsonreport.plugin import JSONReport
import mockfirestore
from services import api_service

# TODO: This should be stored in an external JSON file.
default_schools = [
    {
        "id": "Usask",
        "owner": "Super_Admin_1",
        "Classrooms": [
            {"id": "c1",
            "name": "Class1",
            "managed_by": ["Admin_1", "Admin_2"],
            "members": ["Standard_1", "Standard_2"]}
        ],
        "UserProfiles": [
            {"id": "Super_Admin_1", 
            "email": "Super_Admin_1@email.com",
            "privilege_level": 0},

            {"id": "Standard_1", 
            "email": "Standard_1@email.com",
            "privilege_level": 2}
        ]
    },
    {
        "id": "Mock_School",
        "owner" "Super_Admin_2"
        "UserProfiles": [
            {"id": "Super_Admin_2", 
            "email": "Super_Admin_2@email.com",
            "privilege_level": 0},
            {"id": "Super_Admin_3", 
            "email": "Super_Admin_3@email.com",
            "privilege_level": 0},
            {"id": "Super_Admin_4", 
            "email": "Super_Admin_4@email.com",
            "privilege_level": 0},
            {"id": "Super_Admin_5", 
            "email": "Super_Admin_5@email.com",
            "privilege_level": 0},

            {"id": "Admin_1", 
            "email": "Admin_1@email.com",
            "privilege_level": 1},
            {"id": "Admin_2", 
            "email": "Admin_2@email.com",
            "privilege_level": 1},
            {"id": "Admin_3", 
            "email": "Admin_3@email.com",
            "privilege_level": 1},
            {"id": "Admin_4", 
            "email": "Admin_4@email.com",
            "privilege_level": 1}, 

            {"id": "Standard_1", 
            "email": "Standard_1@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_2", 
            "email": "Standard_2@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_3", 
            "email": "Standard_3@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_4", 
            "email": "Standard_4@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_5", 
            "email": "Standard_5@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_6", 
            "email": "Standard_6@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_71", 
            "email": "Standard_7@email.com",
            "privilege_level": 2}, 
            {"id": "Standard_8", 
            "email": "Standard_8@email.com",
            "privilege_level": 2}
        ]
    }
]

@pytest.fixture
def mock_api(scope="module"):
    # make the mock
    mock = mockfirestore.MockFirestore()
    api_service.API._db = mock

    # fill it with data
    api_instance = api_service.API.get_api()
    set_mock_data(api_instance)

    yield api_instance


def set_mock_data(api_instance):
    """ Set up some default data for schools, users, classrooms, history.
    Put it in the mock database so we can pull it in tests.
    """
    for school in default_schools:
        school_id = school["id"]
        school_path = "Schools/" + school_id + "/"
        s = {
            "id": school_id,
            "name": school_id,
            "owner": school_path + "UserProfiles/" + school["owner"]
        }
        
        api_instance.post(path=school_path, data=s)

        if "Classrooms" in school:
            for classroom in school["Classrooms"]:
                c = {
                    "name": classroom["name"],
                    "members": [school_path + member for member in classroom["members"]],
                    "managed_by": [school_path + managed for managed in classroom["managed_by"]]
                }
                class_path = school_path + "Classrooms/" + classroom["id"]
                api_instance.post(path=class_path, data=c)

        if "UserProfiles" in school:
            for profile in school["UserProfiles"]:
                user = {
                   "id":  profile["id"],
                   "email": profile["email"],
                   "id": profile["id"],
                   "privilege_level": profile["privilege_level"]
                }
                user_path = school_path + "UserProfiles/" + profile["id"]
                api_instance.post(path=user_path, data=user)

                if "History" in user:
                    history_path = user_path + "/History"
                    for history_item in user["History"]:
                        h = history_item
                        h["user_profile"] = user_path
                        api_instance.post(path=history_path, data=h)



@pytest.hookimpl(optionalhook=True)
def pytest_json_modifyreport(json_report):
    """Modifies the report that comes out of --json-report 
    """
    # get number of warnings generated by test
    num_warnings = len(json_report['warnings']) if 'warnings' in json_report else 0
    # the root will vary depending on the device it is run on. We only care that it's run in the group2 directory.
    root = json_report['root'].split("\\")[-1]
    summary_keys = list(json_report['summary'].keys())

    # test is considered a success IF:
        # there are no warnings generated
        # the tests were run at the top-level "group2" directory
        # the summary only has 'passed', 'total', and 'collected' fields. NO XFAIL, XPASS, or FAIL.
    success = True if num_warnings == 0 and root == 'group2' and summary_keys == ['passed', 'total', 'collected'] else False

    # strip excessive information from tests that pass
    tests = json_report['tests']
    for i, test in enumerate(tests):
        if test['outcome'] == "passed":
            t = {}
            for field in ["nodeid", "outcome", "metadata"]:
                t[field] = test[field] if field in test else ""
            tests[i] = t
    
    # put test time in a readable format
    created = datetime.fromtimestamp(json_report['created'])

    json_report['created'] = created
    json_report['success'] = success
    json_report['root'] = root
    json_report['tests'] = tests

    # not useful information for us
    to_delete = ['environment', 'collectors']
    for item in to_delete:
        del json_report[item]
