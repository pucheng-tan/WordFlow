{"created": "2020-12-02 01:55:13.360870", "duration": 1.0312416553497314, "exitcode": 1, "root": "group2", "summary": {"failed": 2, "passed": 3, "xpassed": 1, "total": 6, "collected": 6}, "tests": [{"nodeid": "managements/test_user_management.py::test_create_auth_user[Testing an invalid email-invalid_email.com-error]", "lineno": 7, "outcome": "failed", "keywords": ["pytestmark", "parametrize", "Testing an invalid email-invalid_email.com-error", "group2", "test_create_auth_user[Testing an invalid email-invalid_email.com-error]", "managements/test_user_management.py"], "setup": {"duration": 0.0006374999999999575, "outcome": "passed"}, "call": {"duration": 0.002013400000000054, "outcome": "failed", "crash": {"path": "C:\\Users\\Sarah\\PycharmProjects\\group2\\managements\\test_user_management.py", "lineno": 16, "message": "assert 'error' == {'error': \"'uid'\"}\n  +'error'\n  -{'error': \"'uid'\"}"}, "traceback": [{"path": "managements\\test_user_management.py", "lineno": 16, "message": "AssertionError"}], "stdout": "'uid'\n", "longrepr": "description = 'Testing an invalid email', email = 'invalid_email.com', expected_result = 'error'\n\n    @pytest.mark.parametrize(\"description, email, expected_result\", [\n        (\"Testing an invalid email\", \"invalid_email.com\", \"error\"),\n        (\"Testing an invalid email\", \"\", \"error\")\n    ])\n    \n    def test_create_auth_user(description, email, expected_result):\n        result = user_management.create_auth_user(email)\n    \n>       assert expected_result == result\nE       assert 'error' == {'error': \"'uid'\"}\nE         +'error'\nE         -{'error': \"'uid'\"}\n\nmanagements\\test_user_management.py:16: AssertionError"}, "teardown": {"duration": 0.0004925000000000068, "outcome": "passed"}}, {"nodeid": "managements/test_user_management.py::test_create_auth_user[Testing an invalid email--error]", "lineno": 7, "outcome": "failed", "keywords": ["pytestmark", "test_create_auth_user[Testing an invalid email--error]", "Testing an invalid email--error", "parametrize", "group2", "managements/test_user_management.py"], "setup": {"duration": 0.0005925999999999432, "outcome": "passed"}, "call": {"duration": 0.0005881999999999277, "outcome": "failed", "crash": {"path": "C:\\Users\\Sarah\\PycharmProjects\\group2\\managements\\test_user_management.py", "lineno": 16, "message": "assert 'error' == {'error': \"'uid'\"}\n  +'error'\n  -{'error': \"'uid'\"}"}, "traceback": [{"path": "managements\\test_user_management.py", "lineno": 16, "message": "AssertionError"}], "stdout": "'uid'\n", "longrepr": "description = 'Testing an invalid email', email = '', expected_result = 'error'\n\n    @pytest.mark.parametrize(\"description, email, expected_result\", [\n        (\"Testing an invalid email\", \"invalid_email.com\", \"error\"),\n        (\"Testing an invalid email\", \"\", \"error\")\n    ])\n    \n    def test_create_auth_user(description, email, expected_result):\n        result = user_management.create_auth_user(email)\n    \n>       assert expected_result == result\nE       assert 'error' == {'error': \"'uid'\"}\nE         +'error'\nE         -{'error': \"'uid'\"}\n\nmanagements\\test_user_management.py:16: AssertionError"}, "teardown": {"duration": 0.00035050000000003134, "outcome": "passed"}}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success0]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success1]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[invalid user-error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_login", "lineno": 27, "outcome": "xpassed", "keywords": ["pytestmark", "xfail", "test_login", "group2", "managements/test_user_management.py"], "setup": {"duration": 0.00037569999999997883, "outcome": "passed"}, "call": {"duration": 0.00024359999999989945, "outcome": "passed"}, "teardown": {"duration": 0.00029440000000002797, "outcome": "passed"}}], "success": false}