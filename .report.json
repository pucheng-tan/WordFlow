{"created": "2020-11-24 14:50:11.130033", "duration": 7.119026184082031, "exitcode": 0, "root": "group2", "summary": {"passed": 21, "xpassed": 1, "total": 22, "collected": 22}, "tests": [{"nodeid": "managements/test_user_management.py::test_create_user[valid user-success0]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success1]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[invalid user-error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_login", "lineno": 15, "outcome": "xpassed", "keywords": ["group2", "test_login", "xfail", "managements/test_user_management.py", "pytestmark"], "setup": {"duration": 0.0007411000000003831, "outcome": "passed"}, "call": {"duration": 0.0005261000000000848, "outcome": "passed"}, "teardown": {"duration": 0.0005821000000003629, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params0-expected_references0]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: History of specific user: filter with <, ==, and in"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params1-expected_references1]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get_all for History collection: filter by the school, sort ascending the assignment ID. Test that passing in a sort which should be incompatible with the where clauses is handled gracefully"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params2-expected_references2]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: filter collection by array contains specified document reference"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params3-expected_references3]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get a specific document by its path/reference"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params4-expected_references4]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get all documents in a collection with a descending sort"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params0]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: invalid limit"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params1]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: where clause should be nested"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params2]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: "}}, {"nodeid": "services/test_api_service.py::test_post_valid", "outcome": "passed", "metadata": {"id": "UT API.3", "description": "Testing 'post' queries with all the datatypes available"}}, {"nodeid": "services/test_challenge_service.py::test_get_mode_count", "outcome": "passed", "metadata": {"id": "UT ChallengeService.1", "description": "Verify that the get_mode_count returns the correct data"}}, {"nodeid": "services/test_challenge_service.py::test_get_challenge_content", "outcome": "passed", "metadata": {"id": "UT ChallengeService.2", "description": "Verify that the correct attribute/data is returned"}}, {"nodeid": "services/test_challenge_service.py::test_save_challenge_results", "outcome": "passed", "metadata": {"id": "UT ChallengeService.3", "description": "Verify that data comes is saved as expected with additional fields included"}}, {"nodeid": "services/test_user_service.py::test_create_user[user0-True-A completely new user]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A completely new user"}}, {"nodeid": "services/test_user_service.py::test_create_user[user1-True-A user which already exists]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A user which already exists"}}, {"nodeid": "services/test_user_service.py::test_create_user[user2-True-Display name omitted- should still work]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: Display name omitted- should still work"}}, {"nodeid": "services/test_user_service.py::test_create_user[user3-invalid email-invalid email- not a proper email format]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid email- not a proper email format"}}, {"nodeid": "services/test_user_service.py::test_create_user[user4-invalid password-invalid password- password too short]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid password- password too short"}}, {"nodeid": "services/test_user_service.py::test_create_user_profile[user0-Test_Post_School]", "outcome": "passed", "metadata": {"id": "UT UserService.2", "description": "Creating the user profile"}}], "warnings": [{"message": "Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead", "category": "DeprecationWarning", "when": "collect", "filename": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\urllib3\\util\\retry.py", "lineno": 255}], "success": false}