{"created": "2020-11-22 16:50:54.424284", "duration": 3.376033067703247, "exitcode": 1, "root": "group2", "summary": {"passed": 5, "failed": 1, "total": 6, "collected": 6}, "tests": [{"nodeid": "services/test_user_service.py::test_create_user[user0-True-A completely new user]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A completely new user"}}, {"nodeid": "services/test_user_service.py::test_create_user[user1-True-A user which already exists]", "lineno": 20, "outcome": "failed", "keywords": ["user1-True-A user which already exists", "group2", "services/test_user_service.py", "api_call", "parametrize", "test_create_user[user1-True-A user which already exists]", "pytestmark"], "setup": {"duration": 0.0009246999999998895, "outcome": "passed"}, "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A user which already exists"}, "call": {"duration": 0.5047480999999998, "outcome": "failed", "crash": {"path": "C:\\Users\\Sarah\\PycharmProjects\\group2\\services\\test_user_service.py", "lineno": 63, "message": "AssertionError: assert 'Completely New User' == 'ExistingUser'\n  - ExistingUser\n  + Completely New User"}, "traceback": [{"path": "services\\test_user_service.py", "lineno": 63, "message": "AssertionError"}], "longrepr": "user = {'display_name': 'ExistingUser', 'email': 'completely_new_email@test.ca', 'password': 'Val1d_Pa$$word'}, expected_result = True, detail = 'A user which already exists'\njson_metadata = {'description': 'Creating the user auth account: A user which already exists', 'id': 'UT UserService.1'}\n\n    @pytest.mark.api_call\n    @pytest.mark.parametrize(\"user, expected_result, detail\", [\n        ({\n            \"email\": \"completely_new_email@test.ca\",\n            \"password\": \"Val1d_Pa$$word\",\n            \"display_name\": \"Completely New User\"\n        }, True, \"A completely new user\"),\n        ({\n            \"email\": \"completely_new_email@test.ca\",\n            \"password\": \"Val1d_Pa$$word\",\n            \"display_name\": \"ExistingUser\"\n        }, True, \"A user which already exists\"),\n        ({\n            \"email\": \"completely_new_email@test.ca\",\n            \"password\": \"Val1d_Pa$$word\",\n            \"display_name\": \"Completely New User\"\n        }, True, \"Display name omitted- should still work\"),\n        ({\n            \"email\": \"completely_new_email.ca\",\n            \"password\": \"Val1d_Pa$$word\",\n            \"display_name\": \"Completely New User\"\n        }, \"Invalid email format\", \"invalid email- not a proper email format\"),\n        ({\n            \"email\": \"test111@test.ca\",\n            \"password\": \"12345\",\n            \"display_name\": \"Invalid user\"\n        }, \"Password must be at least 6 characters long\", \"invalid password- password too short\")\n    ])\n    def test_create_user(user, expected_result, detail, json_metadata):\n        json_metadata[\"id\"] = \"UT \" + METADATA_ID + \".1\"\n        json_metadata[\"description\"] = \"Creating the user auth account: \" + detail\n    \n        # no matter what, the password should not be returned\n    \n        # if success expected, should have id\n    \n        # otherwise, should be an error returned\n    \n        result = user_service.create_user(user)\n    \n        if expected_result == True:\n            assert result.email == user[\"email\"]\n>           assert result.display_name == user[\"display_name\"]\nE           AssertionError: assert 'Completely New User' == 'ExistingUser'\nE             - ExistingUser\nE             + Completely New User\n\nservices\\test_user_service.py:63: AssertionError"}, "teardown": {"duration": 0.0004146000000000427, "outcome": "passed"}}, {"nodeid": "services/test_user_service.py::test_create_user[user2-True-Display name omitted- should still work]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: Display name omitted- should still work"}}, {"nodeid": "services/test_user_service.py::test_create_user[user3-Invalid email format-invalid email- not a proper email format]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid email- not a proper email format"}}, {"nodeid": "services/test_user_service.py::test_create_user[user4-Password must be at least 6 characters long-invalid password- password too short]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid password- password too short"}}, {"nodeid": "services/test_user_service.py::test_create_user_profile[user0-Test_Post_School]", "outcome": "passed", "metadata": {"id": "UT UserService.2", "description": "Creating the user profile"}}], "success": false}