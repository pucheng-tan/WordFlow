{"created": "2020-11-27 19:25:36.662177", "duration": 2.238297462463379, "exitcode": 1, "root": "group2", "summary": {"failed": 1, "total": 1, "collected": 1}, "tests": [{"nodeid": "services/test_api_service.py::test_get_last_statement", "lineno": 174, "outcome": "failed", "keywords": ["services/test_api_service.py", "group2", "api_call", "pytestmark", "test_get_last_statement"], "setup": {"duration": 0.0011364999999999847, "outcome": "passed"}, "metadata": {"description": "Show get_last_statement() for the demo"}, "call": {"duration": 1.1944569999999999, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\api_service.py", "lineno": 138, "message": "Exception: ('Your code is probably good! But you need to create an index. Click the link:', 'https://console.firebase.google.com/v1/r/project/cmpt370-group2/firestore/indexes?create_composite=Ck5wcm9qZWN0cy9jbXB0MzcwLWdyb3VwMi9kYXRhYmFzZXMvKGRlZmF1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB')"}, "traceback": [{"path": "services\\test_api_service.py", "lineno": 182, "message": ""}, {"path": "services\\api_service.py", "lineno": 138, "message": "Exception"}], "longrepr": "args = (parent: \"projects/cmpt370-group2/databases/(default)/documents\"\nstructured_query {\n  from_ {\n    collection_id: \"Scho...lues {\n                string_value: \"Usask\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n,)\nkwargs = {'metadata': [('google-cloud-resource-prefix', 'projects/cmpt370-group2/databases/(default)'), ('x-goog-request-params...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')]}\nresult = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\nprefetch_first = True\n\n    @general_helpers.wraps(callable_)\n    def error_remapped_callable(*args, **kwargs):\n        try:\n            result = callable_(*args, **kwargs)\n            # Auto-fetching the first result causes PubSub client's streaming pull\n            # to hang when re-opening the stream, thus we need examine the hacky\n            # hidden flag to see if pre-fetching is disabled.\n            # https://github.com/googleapis/python-pubsub/issues/93#issuecomment-630762257\n            prefetch_first = getattr(callable_, \"_prefetch_first_result_\", True)\n>           return _StreamingResponseIterator(result, prefetch_first_result=prefetch_first)\n\nenv\\lib\\site-packages\\google\\api_core\\grpc_helpers.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <google.api_core.grpc_helpers._StreamingResponseIterator object at 0x0000022BAA90CCF8>\nwrapped = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\nprefetch_first_result = True\n\n    def __init__(self, wrapped, prefetch_first_result=True):\n        self._wrapped = wrapped\n    \n        # This iterator is used in a retry context, and returned outside after init.\n        # gRPC will not throw an exception until the stream is consumed, so we need\n        # to retrieve the first result, in order to fail, in order to trigger a retry.\n        try:\n            if prefetch_first_result:\n>               self._stored_first_result = six.next(self._wrapped)\n\nenv\\lib\\site-packages\\google\\api_core\\grpc_helpers.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\n\n    def __next__(self):\n>       return self._next()\n\nenv\\lib\\site-packages\\grpc\\_channel.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\n\n    def _next(self):\n        with self._state.condition:\n            if self._state.code is None:\n                event_handler = _event_handler(self._state,\n                                               self._response_deserializer)\n                operating = self._call.operate(\n                    (cygrpc.ReceiveMessageOperation(_EMPTY_FLAGS),),\n                    event_handler)\n                if operating:\n                    self._state.due.add(cygrpc.OperationType.receive_message)\n            elif self._state.code is grpc.StatusCode.OK:\n                raise StopIteration()\n            else:\n                raise self\n    \n            def _response_ready():\n                return (\n                    self._state.response is not None or\n                    (cygrpc.OperationType.receive_message not in self._state.due\n                     and self._state.code is not None))\n    \n            _common.wait(self._state.condition.wait, _response_ready)\n            if self._state.response is not None:\n                response = self._state.response\n                self._state.response = None\n                return response\n            elif cygrpc.OperationType.receive_message not in self._state.due:\n                if self._state.code is grpc.StatusCode.OK:\n                    raise StopIteration()\n                elif self._state.code is not None:\n>                   raise self\nE                   grpc._channel._MultiThreadedRendezvous: <_MultiThreadedRendezvous of RPC that terminated with:\nE                   \tstatus = StatusCode.FAILED_PRECONDITION\nE                   \tdetails = \"The query requires an index. You can create it here: https://console.firebase.google.com/v1/r/project/cmpt370-group2/firestore/indexes?create_composite=Ck5wcm9qZWN0cy9jbXB0MzcwLWdyb3VwMi9kYXRhYmFzZXMvKGRlZmF1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\"\nE                   \tdebug_error_string = \"{\"created\":\"@1606526736.473000000\",\"description\":\"Error received from peer ipv4:172.217.1.10:443\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1062,\"grpc_message\":\"The query requires an index. You can create it here: https://console.firebase.google.com/v1/r/project/cmpt370-group2/firestore/indexes?create_composite=Ck5wcm9qZWN0cy9jbXB0MzcwLWdyb3VwMi9kYXRhYmFzZXMvKGRlZmF1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\nE                   >\n\nenv\\lib\\site-packages\\grpc\\_channel.py:803: _MultiThreadedRendezvous\n\nThe above exception was the direct cause of the following exception:\n\nself = <api_service.API object at 0x0000022BA90A02E8>, path = 'Schools', where_clauses = [['name', 'string_starts', 'Usa'], ['id', 'in', ['one', 'Usask']]], order_by = None, limit = None\n\n    def get(self, path, where_clauses=None, order_by=None, limit=None):\n        \"\"\" Returns data from following a specific path.\n        Raises: TypeError with Invalid query message. Will return the query as interpreted as a message.\n        Args:\n            - path: string in format of \"parent_collection/doc_id/child_collection/doc_id\"\n                # extraneous \"/\" will be eliminated\n                # if using a where clause, path should end with a collection\n            - where_clauses: list of where clauses to filter by\n                [field, operator, value]\n                operators: <, <=, ==, >, >=, array_contains, array_contains_any, in, string_starts\n                all comparisons (<, <=, >, >=, string_starts) MUST BE ON THE SAME FIELD\n            - limit: Max number of entries to return\n            - order_by: [{field_name: is_ascending}]\n                # is_ascending should be True for ascending, else False\n                # this also checks for the existance of a field\n                # can order by multiple fields\n                # cannot order query by fields with == or \"in\" where clause\n        Usage:\n            - To get a specific document by its reference, just use path, end with doc id\n            - To get all documents in a subcollection, use path and end with collection\n            - To get filtered results: end with collection, and use where_clauses/order_by/limit\n            - if you want to look across subcollections in multiple parents, use get_all() instead\n        Returns:\n            - if a specific document is referenced, dict of data with \"id\" = doc_id added\n            - else {id: doc, id2: doc2,...}\n        \"\"\"\n        # start with instance of firestore client\n        query = self._get_db()\n    \n        try:\n            # point the query down the path, then do filtering operations\n            query = self._get_path(query, path)\n            query = self._filter_query(query, where_clauses, order_by, limit)\n    \n            # then pull the data and turn it into a dictionary\n>           return self._to_dict(query)\n\nservices\\api_service.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api_service.API object at 0x0000022BA90A02E8>, query = <google.cloud.firestore_v1.query.Query object at 0x0000022BAA8E5CF8>\n\n    def _to_dict(self, query):\n        \"\"\" Does the actual get/stream from firestore\n        If it's a single DocumentReference, adds the id into the return object\n        But doesn't if it's multiple because multiple is already {id: doc, id2: doc2...}\n        \"\"\"\n        doc_type = str(type(query))\n    \n        data = None\n        if \"DocumentReference\" in doc_type:\n            data = query.get()\n            doc_id = data.id\n            data = data.to_dict()\n            if data is not None:\n                data[\"id\"] = doc_id\n        elif \"CollectionReference\" in doc_type or \"Query\" in doc_type or \"CollectionGroup\" in doc_type:\n            data = query.stream()\n>           data = {doc.id: doc.to_dict() for doc in data}\n\nservices\\api_service.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n.0 = <generator object Query.stream at 0x0000022BAA8FD150>\n\n>   data = {doc.id: doc.to_dict() for doc in data}\n\nservices\\api_service.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <google.cloud.firestore_v1.query.Query object at 0x0000022BAA8E5CF8>, transaction = None, retry = <object object at 0x0000022BA612CCD0>, timeout = None\n\n    def stream(\n        self,\n        transaction=None,\n        retry: retries.Retry = gapic_v1.method.DEFAULT,\n        timeout: float = None,\n    ) -> Generator[document.DocumentSnapshot, Any, None]:\n        \"\"\"Read the documents in the collection that match this query.\n    \n        This sends a ``RunQuery`` RPC and then returns an iterator which\n        consumes each document returned in the stream of ``RunQueryResponse``\n        messages.\n    \n        .. note::\n    \n           The underlying stream of responses will time out after\n           the ``max_rpc_timeout_millis`` value set in the GAPIC\n           client configuration for the ``RunQuery`` API.  Snapshots\n           not consumed from the iterator before that point will be lost.\n    \n        If a ``transaction`` is used and it already has write operations\n        added, this method cannot be used (i.e. read-after-write is not\n        allowed).\n    \n        Args:\n            transaction\n                (Optional[:class:`~google.cloud.firestore_v1.transaction.Transaction`]):\n                An existing transaction that this query will run in.\n            retry (google.api_core.retry.Retry): Designation of what errors, if any,\n                should be retried.  Defaults to a system-specified policy.\n            timeout (float): The timeout for this request.  Defaults to a\n                system-specified value.\n    \n        Yields:\n            :class:`~google.cloud.firestore_v1.document.DocumentSnapshot`:\n            The next document that fulfills the query.\n        \"\"\"\n        request, expected_prefix, kwargs = self._prep_stream(\n            transaction, retry, timeout,\n        )\n    \n        response_iterator = self._client._firestore_api.run_query(\n>           request=request, metadata=self._client._rpc_metadata, **kwargs,\n        )\n\nenv\\lib\\site-packages\\google\\cloud\\firestore_v1\\query.py:210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <google.cloud.firestore_v1.services.firestore.client.FirestoreClient object at 0x0000022BAA90CA58>\nrequest = parent: \"projects/cmpt370-group2/databases/(default)/documents\"\nstructured_query {\n  from_ {\n    collection_id: \"Schoo...values {\n                string_value: \"Usask\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n    def run_query(\n        self,\n        request: firestore.RunQueryRequest = None,\n        *,\n        retry: retries.Retry = gapic_v1.method.DEFAULT,\n        timeout: float = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n    ) -> Iterable[firestore.RunQueryResponse]:\n        r\"\"\"Runs a query.\n    \n        Args:\n            request (:class:`~.firestore.RunQueryRequest`):\n                The request object. The request for\n                [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery].\n    \n            retry (google.api_core.retry.Retry): Designation of what errors, if any,\n                should be retried.\n            timeout (float): The timeout for this request.\n            metadata (Sequence[Tuple[str, str]]): Strings which should be\n                sent along with the request as metadata.\n    \n        Returns:\n            Iterable[~.firestore.RunQueryResponse]:\n                The response for\n                [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery].\n    \n        \"\"\"\n        # Create or coerce a protobuf request object.\n    \n        # Minor optimization to avoid making a copy if the user passes\n        # in a firestore.RunQueryRequest.\n        # There's no risk of modifying the input as we've already verified\n        # there are no flattened fields.\n        if not isinstance(request, firestore.RunQueryRequest):\n            request = firestore.RunQueryRequest(request)\n    \n        # Wrap the RPC method; this adds retry and timeout information,\n        # and friendly error handling.\n        rpc = self._transport._wrapped_methods[self._transport.run_query]\n    \n        # Certain fields should be provided within the metadata header;\n        # add these here.\n        metadata = tuple(metadata) + (\n            gapic_v1.routing_header.to_grpc_metadata(((\"parent\", request.parent),)),\n        )\n    \n        # Send the request.\n>       response = rpc(request, retry=retry, timeout=timeout, metadata=metadata,)\n\nenv\\lib\\site-packages\\google\\cloud\\firestore_v1\\services\\firestore\\client.py:877: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <google.api_core.gapic_v1.method._GapicCallable object at 0x0000022BAA90C278>\nargs = (parent: \"projects/cmpt370-group2/databases/(default)/documents\"\nstructured_query {\n  from_ {\n    collection_id: \"Scho...lues {\n                string_value: \"Usask\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n,)\nkwargs = {'metadata': [('google-cloud-resource-prefix', 'projects/cmpt370-group2/databases/(default)'), ('x-goog-request-params...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')]}\ntimeout_ = None, retry = <google.api_core.retry.Retry object at 0x0000022BAA90C1D0>, wrapped_func = <function _wrap_stream_errors.<locals>.error_remapped_callable at 0x0000022BAA911158>\nmetadata = [('google-cloud-resource-prefix', 'projects/cmpt370-group2/databases/(default)'), ('x-goog-request-params', 'parent=pr...roup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')]\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"Invoke the low-level RPC with retry, timeout, and metadata.\"\"\"\n        # Note: Due to Python 2 lacking keyword-only arguments we use kwargs to\n        # extract the retry and timeout params.\n        timeout_ = _determine_timeout(\n            self._timeout,\n            kwargs.pop(\"timeout\", self._timeout),\n            # Use only the invocation-specified retry only for this, as we only\n            # want to adjust the timeout deadline if the *user* specified\n            # a different retry.\n            kwargs.get(\"retry\", None),\n        )\n    \n        retry = kwargs.pop(\"retry\", self._retry)\n    \n        if retry is DEFAULT:\n            retry = self._retry\n    \n        # Apply all applicable decorators.\n        wrapped_func = _apply_decorators(self._target, [retry, timeout_])\n    \n        # Add the user agent metadata to the call.\n        if self._metadata is not None:\n            metadata = kwargs.get(\"metadata\", [])\n            # Due to the nature of invocation, None should be treated the same\n            # as not specified.\n            if metadata is None:\n                metadata = []\n            metadata = list(metadata)\n            metadata.extend(self._metadata)\n            kwargs[\"metadata\"] = metadata\n    \n>       return wrapped_func(*args, **kwargs)\n\nenv\\lib\\site-packages\\google\\api_core\\gapic_v1\\method.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (parent: \"projects/cmpt370-group2/databases/(default)/documents\"\nstructured_query {\n  from_ {\n    collection_id: \"Scho...lues {\n                string_value: \"Usask\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n,)\nkwargs = {'metadata': [('google-cloud-resource-prefix', 'projects/cmpt370-group2/databases/(default)'), ('x-goog-request-params...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')]}\ntarget = functools.partial(<function _wrap_stream_errors.<locals>.error_remapped_callable at 0x0000022BAA90B730>, parent: \"proj...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')])\nsleep_generator = <generator object exponential_sleep_generator at 0x0000022BAA8B9EB8>\n\n    @general_helpers.wraps(func)\n    def retry_wrapped_func(*args, **kwargs):\n        \"\"\"A wrapper that calls target function with retry.\"\"\"\n        target = functools.partial(func, *args, **kwargs)\n        sleep_generator = exponential_sleep_generator(\n            self._initial, self._maximum, multiplier=self._multiplier\n        )\n        return retry_target(\n            target,\n            self._predicate,\n            sleep_generator,\n            self._deadline,\n>           on_error=on_error,\n        )\n\nenv\\lib\\site-packages\\google\\api_core\\retry.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = functools.partial(<function _wrap_stream_errors.<locals>.error_remapped_callable at 0x0000022BAA90B730>, parent: \"proj...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')])\npredicate = <function if_exception_type.<locals>.if_exception_type_predicate at 0x0000022BAA90B6A8>, sleep_generator = <generator object exponential_sleep_generator at 0x0000022BAA8B9EB8>\ndeadline = 120.0, on_error = None\n\n    def retry_target(target, predicate, sleep_generator, deadline, on_error=None):\n        \"\"\"Call a function and retry if it fails.\n    \n        This is the lowest-level retry helper. Generally, you'll use the\n        higher-level retry helper :class:`Retry`.\n    \n        Args:\n            target(Callable): The function to call and retry. This must be a\n                nullary function - apply arguments with `functools.partial`.\n            predicate (Callable[Exception]): A callable used to determine if an\n                exception raised by the target should be considered retryable.\n                It should return True to retry or False otherwise.\n            sleep_generator (Iterable[float]): An infinite iterator that determines\n                how long to sleep between retries.\n            deadline (float): How long to keep retrying the target. The last sleep\n                period is shortened as necessary, so that the last retry runs at\n                ``deadline`` (and not considerably beyond it).\n            on_error (Callable[Exception]): A function to call while processing a\n                retryable exception.  Any error raised by this function will *not*\n                be caught.\n    \n        Returns:\n            Any: the return value of the target function.\n    \n        Raises:\n            google.api_core.RetryError: If the deadline is exceeded while retrying.\n            ValueError: If the sleep generator stops yielding values.\n            Exception: If the target raises a method that isn't retryable.\n        \"\"\"\n        if deadline is not None:\n            deadline_datetime = datetime_helpers.utcnow() + datetime.timedelta(\n                seconds=deadline\n            )\n        else:\n            deadline_datetime = None\n    \n        last_exc = None\n    \n        for sleep in sleep_generator:\n            try:\n>               return target()\n\nenv\\lib\\site-packages\\google\\api_core\\retry.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (parent: \"projects/cmpt370-group2/databases/(default)/documents\"\nstructured_query {\n  from_ {\n    collection_id: \"Scho...lues {\n                string_value: \"Usask\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n,)\nkwargs = {'metadata': [('google-cloud-resource-prefix', 'projects/cmpt370-group2/databases/(default)'), ('x-goog-request-params...oup2/databases/%28default%29/documents'), ('x-goog-api-client', 'gl-python/3.6.8 grpc/1.33.2 gax/1.23.0 gapic/2.0.1')]}\nresult = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\nprefetch_first = True\n\n    @general_helpers.wraps(callable_)\n    def error_remapped_callable(*args, **kwargs):\n        try:\n            result = callable_(*args, **kwargs)\n            # Auto-fetching the first result causes PubSub client's streaming pull\n            # to hang when re-opening the stream, thus we need examine the hacky\n            # hidden flag to see if pre-fetching is disabled.\n            # https://github.com/googleapis/python-pubsub/issues/93#issuecomment-630762257\n            prefetch_first = getattr(callable_, \"_prefetch_first_result_\", True)\n            return _StreamingResponseIterator(result, prefetch_first_result=prefetch_first)\n        except grpc.RpcError as exc:\n>           six.raise_from(exceptions.from_grpc_error(exc), exc)\n\nenv\\lib\\site-packages\\google\\api_core\\grpc_helpers.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = None\nfrom_value = <_MultiThreadedRendezvous of RPC that terminated with:\n\tstatus = StatusCode.FAILED_PRECONDITION\n\tdetails = \"The query ...F1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\",\"grpc_status\":9}\"\n>\n\n>   ???\nE   google.api_core.exceptions.FailedPrecondition: 400 The query requires an index. You can create it here: https://console.firebase.google.com/v1/r/project/cmpt370-group2/firestore/indexes?create_composite=Ck5wcm9qZWN0cy9jbXB0MzcwLWdyb3VwMi9kYXRhYmFzZXMvKGRlZmF1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB\n\n<string>:3: FailedPrecondition\n\nDuring handling of the above exception, another exception occurred:\n\njson_metadata = {'description': 'Show get_last_statement() for the demo'}\n\n    @pytest.mark.api_call\n    def test_get_last_statement(json_metadata):\n        json_metadata[\"description\"] = \"Show get_last_statement() for the demo\"\n    \n        path = \"Schools\"\n        where_clauses = [[\"name\", \"string_starts\", \"Usa\"], [\"id\", \"in\", [\"one\", \"Usask\"]]]\n    \n>       result = api.get(path=path, where_clauses=where_clauses)\n\nservices\\test_api_service.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api_service.API object at 0x0000022BA90A02E8>, path = 'Schools', where_clauses = [['name', 'string_starts', 'Usa'], ['id', 'in', ['one', 'Usask']]], order_by = None, limit = None\n\n    def get(self, path, where_clauses=None, order_by=None, limit=None):\n        \"\"\" Returns data from following a specific path.\n        Raises: TypeError with Invalid query message. Will return the query as interpreted as a message.\n        Args:\n            - path: string in format of \"parent_collection/doc_id/child_collection/doc_id\"\n                # extraneous \"/\" will be eliminated\n                # if using a where clause, path should end with a collection\n            - where_clauses: list of where clauses to filter by\n                [field, operator, value]\n                operators: <, <=, ==, >, >=, array_contains, array_contains_any, in, string_starts\n                all comparisons (<, <=, >, >=, string_starts) MUST BE ON THE SAME FIELD\n            - limit: Max number of entries to return\n            - order_by: [{field_name: is_ascending}]\n                # is_ascending should be True for ascending, else False\n                # this also checks for the existance of a field\n                # can order by multiple fields\n                # cannot order query by fields with == or \"in\" where clause\n        Usage:\n            - To get a specific document by its reference, just use path, end with doc id\n            - To get all documents in a subcollection, use path and end with collection\n            - To get filtered results: end with collection, and use where_clauses/order_by/limit\n            - if you want to look across subcollections in multiple parents, use get_all() instead\n        Returns:\n            - if a specific document is referenced, dict of data with \"id\" = doc_id added\n            - else {id: doc, id2: doc2,...}\n        \"\"\"\n        # start with instance of firestore client\n        query = self._get_db()\n    \n        try:\n            # point the query down the path, then do filtering operations\n            query = self._get_path(query, path)\n            query = self._filter_query(query, where_clauses, order_by, limit)\n    \n            # then pull the data and turn it into a dictionary\n            return self._to_dict(query)\n        # except firebase_admin.exceptions.FirebaseError as e:\n        #     exception_message = str(e)\n        #     if \"requires an index\" in exception_message:\n        #         message = \"Your code is probably good! But you need to create an index. Click the link:\"\n        #         start_at = exception_message.index(\"http\")\n        #         index_link = exception_message[start_at:]\n        #         raise Exception(\"Index not created yet\")\n        #     else:\n        #         raise Exception(\"Invalid query\", str(e), self.get_last_statement())\n        except Exception as e:\n            exception_message = str(e)\n            if \"FailedPrecondition\" in str(type(e)):\n                message = \"Your code is probably good! But you need to create an index. Click the link:\"\n                start_at = exception_message.index(\"http\")\n                index_link = exception_message[start_at:]\n>               raise Exception(message, index_link)\nE               Exception: ('Your code is probably good! But you need to create an index. Click the link:', 'https://console.firebase.google.com/v1/r/project/cmpt370-group2/firestore/indexes?create_composite=Ck5wcm9qZWN0cy9jbXB0MzcwLWdyb3VwMi9kYXRhYmFzZXMvKGRlZmF1bHQpL2NvbGxlY3Rpb25Hcm91cHMvU2Nob29scy9pbmRleGVzL18QARoGCgJpZBABGggKBG5hbWUQARoMCghfX25hbWVfXxAB')\n\nservices\\api_service.py:138: Exception"}, "teardown": {"duration": 0.0007782000000000622, "outcome": "passed"}}], "success": false}