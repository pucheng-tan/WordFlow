{"created": "2020-12-06 23:11:04.489772", "duration": 4.488389730453491, "exitcode": 1, "root": "group2", "summary": {"passed": 16, "xpassed": 1, "error": 12, "failed": 4, "total": 33, "collected": 33}, "tests": [{"nodeid": "managements/test_challenge_management.py::test_get_my_challenges", "outcome": "passed", "metadata": {"id": "UT ChallengeService.1", "description": "Get the first 2 pages of challenge results and verify that they are as expected"}}, {"nodeid": "managements/test_challenge_management.py::test_get_my_challenges_last_page", "outcome": "passed", "metadata": {"id": "UT ChallengeService.2", "description": "See what happens when we make calls to paginate when there's no more data"}}, {"nodeid": "managements/test_school_management.py::test_create_school[o2lTSAI6X4yGdIZ0huB9-kUJrBZtlYJeU8ZLAFFcm4dAJVBt2]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_auth_user[Testing an invalid email-invalid_email.com-error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_auth_user[Testing an invalid email--error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success0]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success1]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[invalid user-error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_login", "lineno": 27, "outcome": "xpassed", "keywords": ["managements/test_user_management.py", "pytestmark", "test_login", "group2", "xfail"], "setup": {"duration": 0.0003073999999998467, "outcome": "passed"}, "call": {"duration": 0.00029039999999991295, "outcome": "passed"}, "teardown": {"duration": 0.0006349999999999412, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params0-expected_references0]", "lineno": 17, "outcome": "error", "keywords": ["test_get_valid[params0-expected_references0]", "parametrize", "group2", "api_call", "params0-expected_references0", "services/test_api_service.py", "pytestmark"], "setup": {"duration": 0.0015392999999999102, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E2D1048>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0006824000000000829, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params1-expected_references1]", "lineno": 17, "outcome": "error", "keywords": ["parametrize", "group2", "test_get_valid[params1-expected_references1]", "services/test_api_service.py", "api_call", "params1-expected_references1", "pytestmark"], "setup": {"duration": 0.00163789999999997, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E37DE80>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0006313000000000013, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params2-expected_references2]", "lineno": 17, "outcome": "error", "keywords": ["parametrize", "group2", "services/test_api_service.py", "api_call", "test_get_valid[params2-expected_references2]", "params2-expected_references2", "pytestmark"], "setup": {"duration": 0.0013259999999999383, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E381940>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0006012000000001905, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params3-expected_references3]", "lineno": 17, "outcome": "error", "keywords": ["parametrize", "pytestmark", "group2", "params3-expected_references3", "api_call", "services/test_api_service.py", "test_get_valid[params3-expected_references3]"], "setup": {"duration": 0.0015349000000000057, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E361A90>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0004292999999999658, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params4-expected_references4]", "lineno": 17, "outcome": "error", "keywords": ["parametrize", "group2", "params4-expected_references4", "api_call", "services/test_api_service.py", "pytestmark", "test_get_valid[params4-expected_references4]"], "setup": {"duration": 0.0009715999999999614, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E39CC18>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005228000000001565, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params0]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: invalid limit"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params1]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: where clause should be nested"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params2]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: "}}, {"nodeid": "services/test_api_service.py::test_post_valid", "lineno": 143, "outcome": "error", "keywords": ["api_call", "test_post_valid", "services/test_api_service.py", "group2", "pytestmark"], "setup": {"duration": 0.001574199999999859, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3B0748>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0003880999999998913, "outcome": "passed"}}, {"nodeid": "services/test_challenge_service.py::test_get_mode_count", "lineno": 11, "outcome": "failed", "keywords": ["api_call", "pytestmark", "services/test_challenge_service.py", "test_get_mode_count", "group2"], "setup": {"duration": 0.002027000000000001, "outcome": "passed"}, "metadata": {"id": "UT ChallengeService.1", "description": "Verify that the get_mode_count returns the correct data"}, "call": {"duration": 0.0006059999999998844, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\challenge_service.py", "lineno": 32, "message": "IndexError: list index out of range"}, "traceback": [{"path": "services\\test_challenge_service.py", "lineno": 19, "message": ""}, {"path": "services\\challenge_service.py", "lineno": 32, "message": "IndexError"}], "longrepr": "json_metadata = {'description': 'Verify that the get_mode_count returns the correct data', 'id': 'UT ChallengeService.1'}\n\n    @pytest.mark.api_call\n    def test_get_mode_count(json_metadata):\n        json_metadata[\"id\"] = \"UT \" + METADATA_ID + \".1\"\n        json_metadata[\"description\"] = \"Verify that the get_mode_count returns the correct data\"\n    \n        # the mode \"7\" is not a real mode, it is only used for testing purposes\n        # the data is static\n>       mode_count = service.get_mode_count(7)\n\nservices\\test_challenge_service.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <services.challenge_service.ChallengeService object at 0x000002174E11FB00>, mode = 7\n\n    def get_mode_count(self, mode):\n        \"\"\"Counts how many documents are in a particular mode collection.\n        All of those documents are expected to have a incrementing index field.\n        Just finds the document with the highest index and returns the index.\n        Index is 0-based, so it's technically the count - 1.\n        \"\"\"\n        path = ChallengeService._CHALLENGE_CONTENT_PATH + str(mode)\n        order_by = [{\"index\": False}]\n        limit = 1\n        result = ChallengeService.api.get(path=path, order_by=order_by, limit=limit)\n>       return list(result.values())[0][\"index\"]\nE       IndexError: list index out of range\n\nservices\\challenge_service.py:32: IndexError"}, "teardown": {"duration": 0.0007038000000001432, "outcome": "passed"}}, {"nodeid": "services/test_challenge_service.py::test_get_challenge_content", "lineno": 26, "outcome": "failed", "keywords": ["api_call", "group2", "test_get_challenge_content", "services/test_challenge_service.py", "pytestmark"], "setup": {"duration": 0.0016066000000001246, "outcome": "passed"}, "metadata": {"id": "UT ChallengeService.2", "description": "Verify that the correct attribute/data is returned"}, "call": {"duration": 0.0008265000000000633, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\challenge_service.py", "lineno": 40, "message": "IndexError: list index out of range"}, "traceback": [{"path": "services\\test_challenge_service.py", "lineno": 32, "message": ""}, {"path": "services\\challenge_service.py", "lineno": 40, "message": "IndexError"}], "longrepr": "json_metadata = {'description': 'Verify that the correct attribute/data is returned', 'id': 'UT ChallengeService.2'}\n\n    @pytest.mark.api_call\n    def test_get_challenge_content(json_metadata):\n        json_metadata[\"id\"] = \"UT \" + METADATA_ID + \".2\"\n        json_metadata[\"description\"] = \"Verify that the correct attribute/data is returned\"\n    \n>       text_content = service.get_challenge_content(7, 1)\n\nservices\\test_challenge_service.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <services.challenge_service.ChallengeService object at 0x000002174E11FB00>, mode = 7, request_index = 1\n\n    def get_challenge_content(self, mode, request_index):\n        \"\"\"Returns a specific challenge's text content for typing.\n        \"\"\"\n        path = ChallengeService._CHALLENGE_CONTENT_PATH + str(mode)\n        where_clause = [[\"index\", \"==\", request_index]]\n        result = ChallengeService.api.get(path=path, where_clauses=where_clause)\n>       text_content = list(result.values())[0][\"text_content\"]\nE       IndexError: list index out of range\n\nservices\\challenge_service.py:40: IndexError"}, "teardown": {"duration": 0.00048050000000010584, "outcome": "passed"}}, {"nodeid": "services/test_challenge_service.py::test_save_challenge_results", "lineno": 37, "outcome": "failed", "keywords": ["api_call", "services/test_challenge_service.py", "pytestmark", "test_save_challenge_results", "group2"], "setup": {"duration": 0.0005569000000003044, "outcome": "passed"}, "metadata": {"id": "UT ChallengeService.3", "description": "Verify that data comes is saved as expected with additional fields included"}, "call": {"duration": 0.0007087000000001176, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'test_school', 'UserProfiles', 'test_user', 'History', 'LhY6zBPMAjEM8SgSkaoj']"}, "traceback": [{"path": "services\\test_challenge_service.py", "lineno": 53, "message": ""}, {"path": "services\\challenge_service.py", "lineno": 19, "message": "in save_challenge_results"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "json_metadata = {'description': 'Verify that data comes is saved as expected with additional fields included', 'id': 'UT ChallengeService.3'}\n\n    @pytest.mark.api_call\n    def test_save_challenge_results(json_metadata):\n        json_metadata[\"id\"] = \"UT \" + METADATA_ID + \".3\"\n        json_metadata[\"description\"] = \"Verify that data comes is saved as expected with additional fields included\"\n    \n        school_id = \"test_school\"\n        user_id = \"test_user\"\n        challenge = {\n            \"date_completed\": datetime(2020, 1, 1, 1, 1, 1, 1, tzinfo=timezone.utc),\n            \"mode\": 7,\n            \"duration\": 120,\n            \"wpm\": 16,\n            \"accuracy\": 12\n        }\n        # perform the post operation\n>       post_result_document = service.save_challenge_results(school_id, user_id, challenge)\n\nservices\\test_challenge_service.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nservices\\challenge_service.py:19: in save_challenge_results\n    response = ChallengeService.api.post(path=path, data=challenge)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3872E8>\ndata = {'accuracy': 12, 'date_completed': datetime.datetime(2020, 1, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc), 'duration': 120, 'mode': 7, ...}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'test_school', 'UserProfiles', 'test_user', 'History', 'LhY6zBPMAjEM8SgSkaoj']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005297000000004104, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-0-1]", "lineno": 10, "outcome": "error", "keywords": ["parametrize", "Usask-0-1", "group2", "services/test_school_service.py", "api_call", "pytestmark", "test_get_user_documents_by_privilege[Usask-0-1]"], "setup": {"duration": 0.000842699999999752, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3840B8>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.00047130000000006333, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-1-0]", "lineno": 10, "outcome": "error", "keywords": ["Usask-1-0", "parametrize", "group2", "services/test_school_service.py", "api_call", "test_get_user_documents_by_privilege[Usask-1-0]", "pytestmark"], "setup": {"duration": 0.0006995000000000751, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E339DD8>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.00043180000000031526, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-2-1]", "lineno": 10, "outcome": "error", "keywords": ["parametrize", "Usask-2-1", "test_get_user_documents_by_privilege[Usask-2-1]", "group2", "services/test_school_service.py", "api_call", "pytestmark"], "setup": {"duration": 0.0006394000000002897, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3BB470>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005934000000000772, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Mock_School-0-4]", "lineno": 10, "outcome": "error", "keywords": ["parametrize", "Mock_School-0-4", "group2", "services/test_school_service.py", "api_call", "test_get_user_documents_by_privilege[Mock_School-0-4]", "pytestmark"], "setup": {"duration": 0.0006349999999999412, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3DB908>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005347999999996134, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Mock_School-1-4]", "lineno": 10, "outcome": "error", "keywords": ["parametrize", "Mock_School-1-4", "group2", "services/test_school_service.py", "api_call", "test_get_user_documents_by_privilege[Mock_School-1-4]", "pytestmark"], "setup": {"duration": 0.0016240999999999062, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E39CEF0>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005156999999997858, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Mock_School-2-8]", "lineno": 10, "outcome": "error", "keywords": ["parametrize", "Mock_School-2-8", "pytestmark", "group2", "services/test_school_service.py", "api_call", "test_get_user_documents_by_privilege[Mock_School-2-8]"], "setup": {"duration": 0.0014019999999996813, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']"}, "traceback": [{"path": "conftest.py", "lineno": 94, "message": ""}, {"path": "conftest.py", "lineno": 112, "message": "in set_mock_data"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "scope = 'module'\n\n    @pytest.fixture\n    def mock_api(scope=\"module\"):\n        # make the mock\n        mock = mockfirestore.MockFirestore()\n        api_service.API._db = mock\n    \n        # fill it with data\n        api_instance = api_service.API.get_api()\n>       set_mock_data(api_instance)\n\nconftest.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:112: in set_mock_data\n    api_instance.post(path=school_path, data=s)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E381390>, data = {'id': 'Usask', 'name': 'Usask', 'owner': 'Schools/Usask/UserProfiles/Super_Admin_1'}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Usask']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0005285999999999902, "outcome": "passed"}}, {"nodeid": "services/test_user_service.py::test_create_user[user0-True-A completely new user]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A completely new user"}}, {"nodeid": "services/test_user_service.py::test_create_user[user1-True-A user which already exists]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A user which already exists"}}, {"nodeid": "services/test_user_service.py::test_create_user[user2-True-Display name omitted- should still work]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: Display name omitted- should still work"}}, {"nodeid": "services/test_user_service.py::test_create_user[user3-Invalid email format-invalid email- not a proper email format]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid email- not a proper email format"}}, {"nodeid": "services/test_user_service.py::test_create_user[user4-Password must be at least 6 characters long-invalid password- password too short]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid password- password too short"}}, {"nodeid": "services/test_user_service.py::test_create_user_profile[user0-Test_Post_School]", "lineno": 65, "outcome": "failed", "keywords": ["test_create_user_profile[user0-Test_Post_School]", "parametrize", "group2", "api_call", "services/test_user_service.py", "user0-Test_Post_School", "pytestmark"], "setup": {"duration": 0.0011722999999994599, "outcome": "passed"}, "metadata": {"id": "UT UserService.2", "description": "Creating the user profile"}, "call": {"duration": 0.00040969999999962425, "outcome": "failed", "crash": {"path": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Test_Post_School', 'UserProfiles', '1234']"}, "traceback": [{"path": "services\\test_user_service.py", "lineno": 79, "message": ""}, {"path": "services\\user_service.py", "lineno": 45, "message": "in create_user_profile"}, {"path": "services\\api_service.py", "lineno": 325, "message": "in post"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 62, "message": "in set"}, {"path": "env\\lib\\site-packages\\mockfirestore\\document.py", "lineno": 69, "message": "NotFound"}], "longrepr": "user = {'display_name': 'Test Post User', 'email': 'test_post_user@test.caaaa', 'id': '1234', 'password': 'Pass123!', ...}, school_id = 'Test_Post_School'\njson_metadata = {'description': 'Creating the user profile', 'id': 'UT UserService.2'}\n\n    @pytest.mark.api_call\n    @pytest.mark.parametrize(\"user, school_id\", [\n        ({\n            \"id\": \"1234\",\n            \"email\": \"test_post_user@test.caaaa\",\n            \"password\": \"Pass123!\",\n            \"display_name\": \"Test Post User\",\n            \"privilege_level\": PRIV[\"standard\"]\n        }, TEST_POST_SCHOOL_ID)\n    ])\n    def test_create_user_profile(user, school_id, json_metadata):\n        json_metadata[\"id\"] = \"UT \" + METADATA_ID + \".2\"\n        json_metadata[\"description\"] = \"Creating the user profile\"\n>       result = user_service.create_user_profile(user, school_id)\n\nservices\\test_user_service.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nservices\\user_service.py:45: in create_user_profile\n    result = UserService._api.post(path, user)\nservices\\api_service.py:325: in post\n    result = query.set(data, merge=merge)\nenv\\lib\\site-packages\\mockfirestore\\document.py:62: in set\n    self.update(deepcopy(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <mockfirestore.document.DocumentReference object at 0x000002174E3F0F60>\ndata = {'display_name': 'Test Post User', 'email': 'test_post_user@test.caaaa', 'id': '1234', 'password': 'Pass123!', ...}\n\n    def update(self, data: Dict[str, Any]):\n        document = get_by_path(self._data, self._path)\n        if document == {}:\n>           raise NotFound('No document to update: {}'.format(self._path))\nE           google.api_core.exceptions.NotFound: 404 No document to update: ['Schools', 'Test_Post_School', 'UserProfiles', '1234']\n\nenv\\lib\\site-packages\\mockfirestore\\document.py:69: NotFound"}, "teardown": {"duration": 0.0008233999999998076, "outcome": "passed"}}], "warnings": [{"message": "Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead", "category": "DeprecationWarning", "when": "collect", "filename": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\urllib3\\util\\retry.py", "lineno": 255}], "success": false}