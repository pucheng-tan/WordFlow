{"created": "2020-12-06 13:06:22.464154", "duration": 10.333133697509766, "exitcode": 1, "root": "group2", "summary": {"passed": 29, "xpassed": 1, "failed": 3, "total": 33, "collected": 33}, "tests": [{"nodeid": "managements/test_challenge_management.py::test_get_my_challenges", "outcome": "passed", "metadata": {"id": "UT ChallengeService.1", "description": "Get the first 2 pages of challenge results and verify that they are as expected"}}, {"nodeid": "managements/test_challenge_management.py::test_get_my_challenges_last_page", "outcome": "passed", "metadata": {"id": "UT ChallengeService.2", "description": "See what happens when we make calls to paginate when there's no more data"}}, {"nodeid": "managements/test_school_management.py::test_create_school[o2lTSAI6X4yGdIZ0huB9-kUJrBZtlYJeU8ZLAFFcm4dAJVBt2]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success0]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[valid user-success1]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_create_user[invalid user-error]", "outcome": "passed", "metadata": ""}, {"nodeid": "managements/test_user_management.py::test_login", "lineno": 15, "outcome": "xpassed", "keywords": ["test_login", "pytestmark", "managements/test_user_management.py", "xfail", "group2"], "setup": {"duration": 0.0007919999999996818, "outcome": "passed"}, "call": {"duration": 0.0006422999999999845, "outcome": "passed"}, "teardown": {"duration": 0.0007223999999999009, "outcome": "passed"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params0-expected_references0]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: History of specific user: filter with <, ==, and in"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params1-expected_references1]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get_all for History collection: filter by the school, sort ascending the assignment ID. Test that passing in a sort which should be incompatible with the where clauses is handled gracefully"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params2-expected_references2]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: filter collection by array contains specified document reference"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params3-expected_references3]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get a specific document by its path/reference"}}, {"nodeid": "services/test_api_service.py::test_get_valid[params4-expected_references4]", "outcome": "passed", "metadata": {"id": "UT API.1", "description": "Testing various valid 'get' queries with the API: get all documents in a collection with a descending sort"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params0]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: invalid limit"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params1]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: where clause should be nested"}}, {"nodeid": "services/test_api_service.py::test_get_invalid[params2]", "outcome": "passed", "metadata": {"id": "UT API.2", "description": "Testing 'get' queries return expected errors with invalid params: "}}, {"nodeid": "services/test_api_service.py::test_post_valid", "outcome": "passed", "metadata": {"id": "UT API.3", "description": "Testing 'post' queries with all the datatypes available"}}, {"nodeid": "services/test_challenge_service.py::test_get_mode_count", "outcome": "passed", "metadata": {"id": "UT ChallengeService.1", "description": "Verify that the get_mode_count returns the correct data"}}, {"nodeid": "services/test_challenge_service.py::test_get_challenge_content", "outcome": "passed", "metadata": {"id": "UT ChallengeService.2", "description": "Verify that the correct attribute/data is returned"}}, {"nodeid": "services/test_challenge_service.py::test_save_challenge_results", "outcome": "passed", "metadata": {"id": "UT ChallengeService.3", "description": "Verify that data comes is saved as expected with additional fields included"}}, {"nodeid": "services/test_classroom_service.py::test_get_classroom_list", "outcome": "passed", "metadata": {"id": "UT ClassroomService.1", "description": "Get a list of classrooms"}}, {"nodeid": "services/test_classroom_service.py::test_get_classroom_list_when_none_exist", "outcome": "passed", "metadata": {"id": "UT ClassroomService.2", "description": "Empty list is returned when the first classroom has not been made"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-0-1]", "outcome": "passed", "metadata": ""}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-1-0]", "outcome": "passed", "metadata": ""}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[Usask-2-1]", "outcome": "passed", "metadata": ""}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-0-3]", "lineno": 8, "outcome": "failed", "keywords": ["parametrize", "3p1U6xAvKic1RvXMl5nJ-0-3", "test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-0-3]", "pytestmark", "services/test_school_service.py", "api_call", "group2"], "setup": {"duration": 0.0006711000000008127, "outcome": "passed"}, "call": {"duration": 0.10711859999999973, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\test_school_service.py", "lineno": 21, "message": "assert 5 == 3\n  +5\n  -3"}, "traceback": [{"path": "services\\test_school_service.py", "lineno": 21, "message": "AssertionError"}], "longrepr": "test_school_id = '3p1U6xAvKic1RvXMl5nJ', privilege_level = 0, expected_result = 3\n\n    @pytest.mark.api_call\n    @pytest.mark.parametrize(\"test_school_id,privilege_level,expected_result\", [\n            (\"Usask\", 0, 1),\n            (\"Usask\", 1, 0),\n            (\"Usask\", 2, 1),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 0, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 1, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 2, 8)])\n    \n    def test_get_user_documents_by_privilege(test_school_id, privilege_level, expected_result):\n        user_documents = school_service.get_user_documents_by_privilege(test_school_id, privilege_level)\n    \n>       assert(len(user_documents) == expected_result)\nE       assert 5 == 3\nE         +5\nE         -3\n\nservices\\test_school_service.py:21: AssertionError"}, "teardown": {"duration": 0.00043100000000073635, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-1-3]", "lineno": 8, "outcome": "failed", "keywords": ["parametrize", "pytestmark", "services/test_school_service.py", "api_call", "3p1U6xAvKic1RvXMl5nJ-1-3", "group2", "test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-1-3]"], "setup": {"duration": 0.0004936999999998193, "outcome": "passed"}, "call": {"duration": 0.11115070000000049, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\test_school_service.py", "lineno": 21, "message": "assert 5 == 3\n  +5\n  -3"}, "traceback": [{"path": "services\\test_school_service.py", "lineno": 21, "message": "AssertionError"}], "longrepr": "test_school_id = '3p1U6xAvKic1RvXMl5nJ', privilege_level = 1, expected_result = 3\n\n    @pytest.mark.api_call\n    @pytest.mark.parametrize(\"test_school_id,privilege_level,expected_result\", [\n            (\"Usask\", 0, 1),\n            (\"Usask\", 1, 0),\n            (\"Usask\", 2, 1),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 0, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 1, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 2, 8)])\n    \n    def test_get_user_documents_by_privilege(test_school_id, privilege_level, expected_result):\n        user_documents = school_service.get_user_documents_by_privilege(test_school_id, privilege_level)\n    \n>       assert(len(user_documents) == expected_result)\nE       assert 5 == 3\nE         +5\nE         -3\n\nservices\\test_school_service.py:21: AssertionError"}, "teardown": {"duration": 0.0004980000000003315, "outcome": "passed"}}, {"nodeid": "services/test_school_service.py::test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-2-8]", "lineno": 8, "outcome": "failed", "keywords": ["parametrize", "3p1U6xAvKic1RvXMl5nJ-2-8", "pytestmark", "services/test_school_service.py", "api_call", "test_get_user_documents_by_privilege[3p1U6xAvKic1RvXMl5nJ-2-8]", "group2"], "setup": {"duration": 0.0006951000000006147, "outcome": "passed"}, "call": {"duration": 0.10532749999999957, "outcome": "failed", "crash": {"path": "D:\\CST Classes\\repos\\usask\\group2\\services\\test_school_service.py", "lineno": 21, "message": "assert 9 == 8\n  +9\n  -8"}, "traceback": [{"path": "services\\test_school_service.py", "lineno": 21, "message": "AssertionError"}], "longrepr": "test_school_id = '3p1U6xAvKic1RvXMl5nJ', privilege_level = 2, expected_result = 8\n\n    @pytest.mark.api_call\n    @pytest.mark.parametrize(\"test_school_id,privilege_level,expected_result\", [\n            (\"Usask\", 0, 1),\n            (\"Usask\", 1, 0),\n            (\"Usask\", 2, 1),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 0, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 1, 3),\n            (\"3p1U6xAvKic1RvXMl5nJ\", 2, 8)])\n    \n    def test_get_user_documents_by_privilege(test_school_id, privilege_level, expected_result):\n        user_documents = school_service.get_user_documents_by_privilege(test_school_id, privilege_level)\n    \n>       assert(len(user_documents) == expected_result)\nE       assert 9 == 8\nE         +9\nE         -8\n\nservices\\test_school_service.py:21: AssertionError"}, "teardown": {"duration": 0.0005043000000011233, "outcome": "passed"}}, {"nodeid": "services/test_user_service.py::test_create_user[user0-True-A completely new user]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A completely new user"}}, {"nodeid": "services/test_user_service.py::test_create_user[user1-True-A user which already exists]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: A user which already exists"}}, {"nodeid": "services/test_user_service.py::test_create_user[user2-True-Display name omitted- should still work]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: Display name omitted- should still work"}}, {"nodeid": "services/test_user_service.py::test_create_user[user3-Invalid email format-invalid email- not a proper email format]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid email- not a proper email format"}}, {"nodeid": "services/test_user_service.py::test_create_user[user4-Password must be at least 6 characters long-invalid password- password too short]", "outcome": "passed", "metadata": {"id": "UT UserService.1", "description": "Creating the user auth account: invalid password- password too short"}}, {"nodeid": "services/test_user_service.py::test_create_user_profile[user0-Test_Post_School]", "outcome": "passed", "metadata": {"id": "UT UserService.2", "description": "Creating the user profile"}}], "warnings": [{"message": "Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead", "category": "DeprecationWarning", "when": "collect", "filename": "d:\\cst classes\\repos\\usask\\group2\\env\\lib\\site-packages\\urllib3\\util\\retry.py", "lineno": 255}], "success": false}